{"/home/travis/build/npmtest/node-npmtest-linklocal/test.js":"/* istanbul instrument in package npmtest_linklocal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-linklocal/lib.npmtest_linklocal.js":"/* istanbul instrument in package npmtest_linklocal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_linklocal = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_linklocal = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-linklocal/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-linklocal && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_linklocal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_linklocal\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_linklocal.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_linklocal.rollup.js'] =\n            local.assetsDict['/assets.npmtest_linklocal.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_linklocal.__dirname + '/lib.npmtest_linklocal.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-linklocal/node_modules/linklocal/index.js":"'use strict'\n\nvar fs = require('fs')\nvar path = require('path')\nvar mkdirp = require('mkdirp')\nvar rimraf = require('rimraf')\nvar assert = require('assert')\nvar map = require('map-limit')\nvar os = require('os')\n\n// Use junctions on Windows\nif (os.platform() === 'win32') {\n  var symlinkType = 'junction'\n} else {\n  symlinkType = 'dir'\n}\n\nmodule.exports = function linklocal (dirpath, _done) {\n  function done (err, items) {\n    _done(err, items || [])\n  }\n  assert.equal(typeof dirpath, 'string', 'dirpath should be a string')\n  assert.equal(typeof done, 'function', 'done should be a function')\n\n  // please enjoy this pyramid\n  readPackage(dirpath, function (err, pkg) {\n    if (err) return done(err)\n    getLinks(pkg, function (err, links) {\n      if (err) return done(err)\n      filterAllLinksToUnlink(links, function (err, toUnlink) {\n        if (err) return done(err)\n        unlinkLinks(toUnlink, function (err) {\n          if (err) return done(err)\n          linkLinks(links, function (err) {\n            if (err) return done(err)\n            done(null, links)\n          })\n        })\n      })\n    })\n  })\n}\n\nmodule.exports.link = module.exports\n\nmodule.exports.link.named = function (dirpath, done, options) {\n  assert.equal(typeof dirpath, 'string', 'dirpath should be a string')\n  assert.equal(typeof done, 'function', 'done should be a function')\n\n  var getLinksFn = options.recursive ? getLinksRecursive : getLinks\n\n  readPackage(dirpath, function (err, pkg) {\n    if (err) return done(err)\n    getLinksFn(pkg, function (err, links) {\n      if (err) return done(err)\n      filterAllLinksToUnlink(links, function (err, toUnlink) {\n        if (err) return done(err)\n        unlinkLinks(toUnlink, function (err) {\n          if (err) return done(err)\n          linkLinks(links, function (err) {\n            if (err) return done(err)\n            done(null, links)\n          })\n        })\n      })\n    }, options)\n  })\n}\n\nmodule.exports.link.recursive = function linklocalRecursive (dirpath, done) {\n  assert.equal(typeof dirpath, 'string', 'dirpath should be a string')\n  assert.equal(typeof done, 'function', 'done should be a function')\n\n  readPackage(dirpath, function (err, pkg) {\n    if (err) return done(err)\n    getLinksRecursive(pkg, function (err, links) {\n      if (err) return done(err)\n      filterAllLinksToUnlink(links, function (err, toUnlink) {\n        if (err) return done(err)\n        unlinkLinks(toUnlink, function (err) {\n          if (err) return done(err)\n          linkLinks(links, function (err) {\n            if (err) return done(err)\n            done(null, links)\n          })\n        })\n      })\n    })\n  })\n}\n\nmodule.exports.unlink = function unlinklocal (dirpath, done) {\n  readPackage(dirpath, function (err, pkg) {\n    if (err) return done(err)\n    getLinks(pkg, function (err, links) {\n      if (err) return done(err)\n      filterLinksToUnlink(links, function (err, toUnlink) {\n        if (err) return done(err)\n        unlinkLinks(toUnlink, function (err) {\n          if (err) return done(err)\n          done(null, toUnlink)\n        })\n      })\n    })\n  })\n}\n\nmodule.exports.unlink.named = function (dirpath, done, options) {\n  var getLinksFn = options.recursive ? getLinksRecursive : getLinks\n\n  readPackage(dirpath, function (err, pkg) {\n    if (err) return done(err)\n    getLinksFn(pkg, function (err, links) {\n      if (err) return done(err)\n      filterLinksToUnlink(links, function (err, toUnlink) {\n        if (err) return done(err)\n        unlinkLinks(toUnlink, function (err) {\n          if (err) return done(err)\n          done(null, toUnlink)\n        })\n      })\n    }, options)\n  })\n}\n\nmodule.exports.unlink.recursive = function unlinklocalRecursive (dirpath, done) {\n  assert.equal(typeof dirpath, 'string', 'dirpath should be a string')\n  assert.equal(typeof done, 'function', 'done should be a function')\n\n  readPackage(dirpath, function (err, pkg) {\n    if (err) return done(err)\n    getLinksRecursive(pkg, function (err, links) {\n      if (err) return done(err)\n      filterLinksToUnlink(links, function (err, toUnlink) {\n        if (err) return done(err)\n        unlinkLinks(toUnlink, function (err) {\n          if (err) return done(err)\n          done(null, toUnlink)\n        })\n      })\n    })\n  })\n}\n\nmodule.exports.list = function list (dirpath, done) {\n  readPackage(dirpath, function (err, pkg) {\n    if (err) return done(err)\n    getLinks(pkg, done)\n  })\n}\n\nmodule.exports.list.recursive = function listRecursive (dirpath, done) {\n  readPackage(dirpath, function (err, pkg) {\n    if (err) return done(err)\n    getLinksRecursive(pkg, done)\n  })\n}\n\nfunction getLinksRecursive (pkg, done, options) {\n  var _cache = _cache || {}\n\n  return (function _getLinksRecursive (pkg, done) {\n    if (_cache[pkg.dirpath]) return done(null, _cache[pkg.dirpath])\n    getLinks(pkg, function (err, links) {\n      _cache[pkg.dirpath] = _cache[pkg.dirpath] || []\n      if (err) return done(err)\n      _cache[pkg.dirpath] = _cache[pkg.dirpath].concat(links)\n      map(links, Infinity, function (link, next) {\n        readPackage(link.to, function (err, pkg) {\n          if (err) return next(err)\n          _getLinksRecursive(pkg, next)\n        })\n      }, done)\n    }, options)\n  })(pkg, function (err) {\n    if (err) return done(err)\n    var result = Object.keys(_cache).reduce(function (result, key) {\n      return result.concat(_cache[key])\n    }, [])\n    result = uniqueKeys(result, 'from', 'to')\n    return done(null, result)\n  })\n}\n\nfunction getRealPaths (links, done) {\n  map(links, Infinity, function (link, next) {\n    fs.realpath(path.dirname(link), function (err, realPath) {\n      if (err) return next(err)\n      next(null, path.join(realPath, path.basename(link)))\n    })\n  }, function (err, links) {\n    done(err, sortDirs(unique(links || [])))\n  })\n}\n\nfunction readPackage (dirpath, done) {\n  assert.equal(typeof dirpath, 'string', 'dirpath should be a string')\n  var pkgpath = path.join(dirpath, 'package.json')\n  fs.readFile(pkgpath, function (err, data) {\n    if (err) return done(err)\n    try {\n      var pkg = JSON.parse(data)\n    } catch (e) {\n      return done(new Error('Error parsing JSON in ' + pkgpath + ':\\n' + e.message))\n    }\n    pkg.dirpath = dirpath\n    return done(null, pkg)\n  })\n}\n\nfunction getLocalDependencies (pkg, done, options) {\n  assert.equal(typeof pkg, 'object', 'pkg should be an object')\n  var deps = getDependencies(pkg)\n  var localDependencies = getPackageLocalDependencies(pkg, options)\n  .map(function (name) {\n    var pkgPath = deps[name]\n    pkgPath = pkgPath.replace(/^file:/g, '')\n\n    if (options && options.scopeRename) {\n      return path.resolve(options.cwd, options.scopeRename)\n    }\n\n    if (options && options.packages.length > 0) {\n      return path.resolve(options.cwd, name)\n    }\n\n    return path.resolve(pkg.dirpath, pkgPath)\n  })\n\n  getRealPaths(localDependencies, done)\n}\n\nfunction getPackageLocalDependencies (pkg, options) {\n  assert.equal(typeof pkg, 'object', 'pkg should be an object')\n  var deps = getDependencies(pkg)\n  return Object.keys(deps).filter(function (name) {\n    var dep = deps[name]\n    return isLocalDependency(dep, name, options)\n  })\n}\n\nfunction getDependencies (pkg) {\n  var deps = pkg.dependencies || {}\n  var devDependencies = pkg.devDependencies || {}\n  for (var name in devDependencies) {\n    deps[name] = devDependencies[name]\n  }\n  return deps\n}\n\nfunction isLocalDependency (val, name, options) {\n  var ignoreExt = '.tgz'\n\n  if (options && options.scopeRename && options.packages) {\n    return isScopedDependency(name, options)\n  }\n\n  if (options && options.packages) {\n    return options.packages.indexOf(name) !== -1\n  }\n\n  return (\n    (val.indexOf('.') === 0 ||\n     val.indexOf('/') === 0 ||\n     val.indexOf('file:') === 0) &&\n    val.lastIndexOf(ignoreExt) !== val.length - ignoreExt.length\n  )\n}\n\nfunction getLinks (pkg, done, options) {\n  getLocalDependencies(pkg, function (err, localDependencies) {\n    if (err) return done(err)\n    var destination = path.join(pkg.dirpath, 'node_modules')\n    map(localDependencies, Infinity, readPackage, function (err, localDependencyPackages) {\n      if (err) return done(err)\n      var links = localDependencyPackages.map(function (localDependency) {\n        return {\n          from: path.resolve(destination, localDependency.name),\n          to: localDependency.dirpath\n        }\n      })\n      done(null, links)\n    })\n  }, options)\n}\n\nfunction isScopedDependency (name, options) {\n  return name.indexOf('@') !== -1 && options.packages.indexOf(name) !== -1\n};\n\nfunction isSymbolicLink (filepath, done) {\n  exists(filepath, function (err, doesExist) {\n    if (err) return done(err)\n    if (!doesExist) return done(null, false)\n    fs.lstat(filepath, function (err, stat) {\n      if (err) return done(err)\n      return done(null, stat.isSymbolicLink())\n    })\n  })\n}\n\nfunction linksTo (from, to, done) {\n  to = path.resolve(path.dirname(from), to)\n  isSymbolicLink(from, function (err, isLink) {\n    if (err) return done(err)\n    if (!isLink) return done(null, false)\n    fs.readlink(from, function (err, currentLink) {\n      if (err) return done(err)\n      currentLink = path.resolve(path.dirname(from), currentLink)\n      return done(null, currentLink === to)\n    })\n  })\n}\n\nfunction filterLinksToUnlink (links, done) {\n  links = uniqueKey(links, 'from')\n  filter(links, Infinity, function (link, next) {\n    linksTo(link.from, link.to, next)\n  }, done)\n}\n\nfunction filterAllLinksToUnlink (links, done) {\n  links = uniqueKey(links, 'from')\n  filter(links, Infinity, function (link, next) {\n    exists(link.from, function (err, ex) {\n      next(err, ex)\n    })\n  }, function (err, toUnlink) {\n    if (err) return done(err)\n    return done(null, toUnlink)\n  })\n}\n\nfunction linkLinks (links, done) {\n  assert.ok(Array.isArray(links), 'links should be an array')\n  map(links, Infinity, function (link, next) {\n    mkdirp(path.dirname(link.from), function (err) {\n      if (err && err.code !== 'EEXISTS') return next(err)\n\n      var from = link.from\n      var to = link.to\n\n      // Junction points can't be relative\n      if (symlinkType !== 'junction') {\n        to = path.relative(path.dirname(from), to)\n      }\n\n      fs.symlink(to, from, symlinkType, function (err) {\n        if (err) return next(new Error('Error linking ' + from + ' to ' + to + ':\\n' + err.message))\n        next(null, link)\n      })\n    })\n  }, done)\n}\n\nfunction unlinkLinks (links, done) {\n  assert.ok(Array.isArray(links), 'links should be an array')\n  map(links, Infinity, function (link, next) {\n    isSymbolicLink(link.from, function (err, isSymlink) {\n      if (err) return next(err)\n      var remove = isSymlink ? fs.unlink : rimraf\n      return remove(link.from, function (err) {\n        if (err) return next(new Error('Error removing ' + link.from + ':\\n' + err.message))\n        next(err, link)\n      })\n    })\n  }, done)\n}\n\nfunction uniqueKeys (items, key1, key2) {\n  var keys = [].slice.call(arguments, 1)\n  return items.filter(function (item, index, arr) {\n    return indexOf(items, function (otherItem) {\n      return keys.every(function (key) {\n        return item[key] === otherItem[key]\n      })\n    }) === index\n  })\n}\n\nfunction indexOf (items, fn) {\n  return items.reduce(function (foundIndex, item, index) {\n    if (foundIndex !== -1) return foundIndex\n    if (fn(item)) return index\n    return foundIndex\n  }, -1)\n}\n\nfunction uniqueKey (items, key) {\n  var values = items.map(function (item) {\n    return item[key]\n  })\n  values = unique(values)\n  return items.filter(function (item) {\n    if (!values.length) return\n    var indexOfValue = values.indexOf(item[key])\n    if (indexOfValue === -1) return false\n    values.splice(indexOfValue, 1)\n    return true\n  })\n}\n\nfunction unique (arr) {\n  return arr.filter(function (item, index, arr) {\n    return arr.indexOf(item) === index\n  })\n}\n\nfunction sortDirs (dirs) {\n  return dirs.sort(function (dirA, dirB) {\n    if (dirA === dirB) return 0\n    if (dirB.indexOf(dirA) === 0) return 1\n    return -1\n  })\n}\n\nfunction filter (arr, num, filterFn, done) {\n  map(arr, num, filterFn, function (err, matches) {\n    return done(err, arr.filter(function (item, index) {\n      return !!matches[index]\n    }))\n  })\n}\n\nfunction exists (filepath, done) {\n  fs.lstat(filepath, function (err, stat) {\n    if (err) {\n      if (err.code !== 'ENOENT') return done(err)\n      return done(null, false)\n    }\n    done(null, !!stat)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-linklocal/node_modules/linklocal/bin/linklocal.js":"#!/usr/bin/env node\n\nvar path = require('path')\nvar linklocal = require('../')\nvar program = require('commander')\nvar pkg = require('../package.json')\n\nprogram\n  .usage('[options] <dir>')\n  .option('-f, --format [format]', 'output format', String, '%h')\n  .option('-l, --link', 'Link local dependencies [default]')\n  .option('-r, --recursive', 'Link recursively')\n  .option('-q, --unique', 'Only unique lines of output')\n  .option('-u, --unlink', 'Unlink local dependencies')\n  .option('-n, --named', 'Link only named packages, last argument is cwd')\n  .option('--absolute', 'Format output paths as absolute paths')\n  .option('--files', 'Output only symlink targets (--format=\"%h\") [default]')\n  .option('--links', 'Output only symlinks (--format=\"%s\")')\n  .option('--list', 'Only list local dependencies. Does not link.')\n  .option('--long', 'Output the symlink to hardlink mapping (--format=\"%s -> %h\")')\n  .option('--no-summary', 'Exclude summary i.e. \"Listed 22 dependencies\"')\n  .version(pkg.version)\n\nprogram.on('--help', function () {\n  console.info('  Examples:')\n  console.info('')\n  console.info('    linklocal                                                 # link local deps in current dir')\n  console.info('    linklocal link                                            # link local deps in current dir')\n  console.info('    linklocal -r                                              # link local deps recursively')\n  console.info('    linklocal unlink                                          # unlink only in current dir')\n  console.info('    linklocal unlink -r                                       # unlink recursively')\n  console.info('')\n  console.info('    linklocal list                                            # list all local deps, ignores link status')\n  console.info('    linklocal list -r                                         # list all local deps recursively, ignoring link status')\n  console.info('')\n  console.info('    linklocal -- mydir                                        # link local deps in mydir')\n  console.info('    linklocal unlink -- mydir                                 # unlink local deps in mydir')\n  console.info('    linklocal --named pkgname ../to/pkg                       # link local dep by name/path')\n  console.info('    linklocal --named pkgname1 pkgname2 ../to/pkg             # link local deps by name/path')\n  console.info('    linklocal unlink --named pkgname ../to/pkg                # unlink local dep by name/')\n  console.info('    linklocal --named -r pkgname ../to/pkg                    # link local deps recursively by name/')\n  console.info('    linklocal --named -r @scope/pkgname pkgname ../to/pkg     # link local deps recursively by name/ with npm @scope')\n  console.info('')\n  console.info('  Formats:')\n  console.info('')\n  console.info('    %s: relative path to symlink')\n  console.info('    %S: absolute path to symlink')\n  console.info('    %h: relative real path to symlink target')\n  console.info('    %H: absolute real path to symlink target')\n  console.info('')\n  console.info('    relative paths are relative to cwd')\n  console.info('')\n})\nprogram.parse(process.argv)\n\nvar command = program.unlink ? 'unlink' : 'link'\n\nif (program.list) command = 'list'\n\nprogram.args[0] = program.args[0] || ''\n\nvar named = !!program.named\nvar dir = path.resolve(process.cwd(), program.args[0]) || process.cwd()\nvar recursive = !!program.recursive\n\nvar fn = linklocal[command]\nif (recursive) fn = fn.recursive\nif (named) {\n  fn = linklocal[command].named\n  dir = process.cwd()\n}\n\nvar format = ''\nif (program.files) format = '%h'\nif (program.links) format = '%s'\nif (program.long) format = '%s -> %h'\nif (!format) format = program.format\n\nif (program.absolute) format = format.toUpperCase()\n\nvar options = !named ? {} : {\n  cwd: program.args[program.args.length - 1],\n  packages: program.args.slice(0, program.args.length - 1),\n  recursive: recursive\n}\n\nif (named) {\n  var renameIndex = program.args.findIndex(function (arg) { return arg.indexOf('@') !== -1 })\n  var rename = renameIndex !== -1 ? program.args[renameIndex + 1] : null\n\n  options = {\n    cwd: program.args[program.args.length - 1],\n    packages: program.args.slice(0, program.args.length - 1),\n    scopeRename: rename,\n    recursive: recursive\n  }\n}\n\nfn(dir, function (err, items) {\n  if (err) throw err\n  items = items || []\n  var formattedItems = getFormattedItems(items, format)\n  .filter(Boolean)\n\n  if (program.unique) {\n    formattedItems = formattedItems.filter(function (item, index, arr) {\n      // uniqueness\n      return arr.lastIndexOf(item) === index\n    })\n  }\n\n  formattedItems.forEach(function (str) {\n    console.log('%s', str)\n  })\n\n  summary(command, program.list ? formattedItems : items)\n}, options)\n\nvar formats = {\n  '%S': function (obj) {\n    return obj.from\n  },\n  '%H': function (obj) {\n    return obj.to\n  },\n  '%s': function (obj) {\n    return path.relative(process.cwd(), obj.from)\n  },\n  '%h': function (obj) {\n    return path.relative(process.cwd(), obj.to)\n  }\n}\n\nfunction getFormattedItems (items, format) {\n  return items.map(function (item) {\n    return formatOut(item, format)\n  })\n}\n\nfunction formatOut (input, format) {\n  var output = format\n  for (var key in formats) {\n    output = output.replace(new RegExp(key, 'gm'), formats[key](input))\n  }\n  return output\n}\n\nfunction summary (commandName, items) {\n  if (!program['summary']) return\n  var length = items.length\n  commandName = command[0].toUpperCase() + command.slice(1)\n  console.error('\\n%sed %d dependenc' + (length === 1 ? 'y' : 'ies'), commandName, length)\n}\n"}